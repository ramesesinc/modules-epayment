import com.rameses.annotations.*;

class EORRemittanceJevReportService {

	@Service(value='JevEORReportService', connection='financial')
	def financialJevReportSvc; 


	@ActiveDB('eor_remittance_jev_report')
	def report_db; 

	@DataContext('eor_remittance')
	def rem_db; 

	@Env 
	def env; 


	@ProxyMethod 
	public def initReport( param ) { 
		def mm = [:]; 
		mm.funds = report_db.getFunds([ remittanceid: param.objid ]); 

		mm = financialJevReportSvc.initReport( mm ); 
		return mm; 
	}


	@ProxyMethod 
	public def getReport( param ) { 
		if ( !param.fund?.objid ) 
			throw new Exception('fund parameter is required'); 
		
		def refdata = rem_db.find([ objid: param.objid ]).first(); 			
		if ( !refdata?.objid ) 
			throw new Exception('Transaction record not found'); 

		def fund = financialJevReportSvc.findFund( param.fund ); 
		if ( !fund?.objid ) 
			throw new Exception(''+ param.fund.objid +' fund record not found'); 

		def p = [ refid: param.objid ];
		p.maingroupid = param.acctgroup?.objid.toString(); 

		def res = buildJevEntries( p.maingroupid, refdata, fund ); 
		if ( res ) refdata.putAll( res );  

		refdata.txnno = refdata.controlno;
		refdata.fund = fund;
		refdata.header = [:];
		return refdata; 
	} 

	@ProxyMethod 
	def buildJevEntries( maingroupid, refdata, fund ) {
		def padding = '      ';
		def revtype = ' ';
		def fundgroupid = fund.groupid.toString().toUpperCase(); 
		if ( fundgroupid == 'GENERAL' ) { 
			revtype = 'basic%';
		} 
		else if ( fundgroupid == 'SEF' ) { 
			revtype = 'sef%';
		} 

		def params = [:]; 
		params.revtype = revtype; 
		params.orgtype = env.ORGCLASS;
		params.fundid = fund.objid;
		params.maingroupid = maingroupid; 
		params.remittanceid = refdata.objid;

		def credits = report_db.getJevEntries( params ); 
		def acctmaps = getAccountMappings( params.maingroupid, credits ); 
		credits.each{ cr-> 
			def acct = acctmaps.find{ it.itemid == cr.acctid }?.account; 
			if ( acct == null ) {
				cr.account = [ code: null, title: null ]; 
			} else {
				cr.account = [ code: acct.code, title: acct.title ]; 
				cr.account.title = padding + acct.title; 	
			}

			if ( !cr.account.code ) cr.account.code = '-'; 
			if ( !cr.account.title ) cr.account.title = '-'; 
		} 

		credits = summarizeAccounts( credits ); 

		def receipts = report_db.getReceipts( params ); 
		params.receiptids = receipts.findAll{( it.receiptid )}.collect{"'"+ it.receiptid +"'"}.join(','); 

		def rptreceivable = financialJevReportSvc.findRPTReceivables( params ); 
		if ( rptreceivable?.credit != null ) {
			credits << rptreceivable;
		} 

		if ( !credits ) return [:]; 

		credits.each{ 
			it.credit = (it.credit == null ? 0.0 : it.credit); 
		}
		credits.sort{a,b -> a.account.code <=> b.account.code }

		//build debits
		def debits = [];
		def rptdiscount = financialJevReportSvc.findRPTBasicDiscount( params )?.discount; 
		if (rptdiscount == null) rptdiscount = 0.0;	

		debits << [account:[title:'Cash in Vault', code:'101'], debit: credits.credit.sum() - rptdiscount, credit:0.0]
		debits << [account:[title:'Other Receivables', code:'149'], debit:0.0, credit:0.0]
		debits << [account:[title:'Discount on RPT', code:'954'], debit:rptdiscount, credit:0.0]

		//rptincomes 
		def rptincomes = report_db.getRPTIncomes( params );
		acctmaps = getAccountMappings( params.maingroupid, rptincomes ); 
		rptincomes.each{ cr-> 
			def acct = acctmaps.find{ it.itemid == cr.acctid }?.account; 
			if ( acct == null ) {
				cr.account = [ code: null, title: null ]; 
			} else {
				cr.account = [ code: acct.code, title: acct.title ]; 
				cr.account.title = padding + acct.title; 	
			}

			if ( !cr.account.code ) cr.account.code = '-'; 
			if ( !cr.account.title ) cr.account.title = '-'; 			

			cr.credit = (cr.credit == null ? 0.0 : cr.credit);
		} 

		rptincomes = summarizeAccounts( rptincomes ); 

		if (rptincomes) { 
			 rptincomes.add(0, [account:[code:'451', title:'DEFERRED RPT INCOME'], credit:0.0, debit:rptincomes.credit.sum()]); 
		} 
		else {  
			rptincomes = [[debit:0.0, credit:0.0]]; 
		} 

		def m = [
			totaldebit  : debits.debit.sum() + rptincomes.debit.sum(),
			totalcredit : credits.credit.sum() + rptincomes.credit.sum(),
			items 		: debits + credits,
			rptincomes 	: rptincomes,
			shares 		: financialJevReportSvc.getRPTShares( params ).each{it.sharetype = it.sharetype.toUpperCase()} 
		]; 
		m.itemcount = m.items.size(); 
		m.rptincomecount = m.rptincomes.size(); 
		m.sharecount = m.shares.size(); 
		return m; 
	} 

	def getAccountMappings( maingroupid, list ) { 
		def mm = [ maingroupid: maingroupid ]; 
		mm.acctids = list.findAll{( it.acctid )}.collect{("'"+ it.acctid +"'")}.join(','); 
		if ( !mm.acctids ) return []; 
		
		return financialJevReportSvc.getAccountMappings( mm ); 
	}

	def summarizeAccounts( list ) { 
		def newlist = []; 
		list.groupBy{ it.account }.each{ kk,vv -> 
			def mm = [ account: kk ]; 
			mm.debit = vv.sum{( it.debit ? it.debit : 0.0 )}
			mm.credit = vv.sum{( it.credit ? it.credit : 0.0 )}
			newlist << mm; 

			if ( mm.debit == null ) mm.debit = 0.0; 
			if ( mm.credit == null ) mm.credit = 0.0; 
		}

		list.clear(); 
		return newlist; 
	}
}