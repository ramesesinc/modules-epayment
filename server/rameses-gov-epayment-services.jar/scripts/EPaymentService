import com.rameses.annotations.*
import com.rameses.util.*
import com.rameses.common.*


/************************************************
* This is the one called by the gdx or kiosk
*************************************************/
class EPaymentService   {

    @DataContext("eor")
    def eorEm; 

    @DataContext("eor_paymentorder")
    def poEm; 

    @DataContext("eor_paymentorder_paid")
    def poPaidEm; 

    @DataContext("eor_paymentorder_cancelled")
    def po_cancelled_db; 

    @DataContext("eor_payment_error")
    def err_db; 

    @Env 
    def env; 

    @Service("EORService")
    def eorSvc;  

    @Service(value='OrgService', connection="admin")
    def orgSvc; 



    @Service("DateService")
    def dateSvc;

    @Service("EORNumberService") 
    def seqSvc; 

    @Service("NumberService")
    def numSvc;

    @Service("JasperEmailQueueService")
    def emailQueueSvc;

    @Service(value="epayment/CloudPaymentService", connection="cloud-server")
    def cloudSvc;

    private void initEnv() {
        env.USERID = 'E-PAYMENT'; 
        env.FULLNAME = 'E-PAYMENT';
        env.USERNAME = 'E-PAYMENT';
    }

    //this method will be intercepted by the other modules based on the txntype 
    @ProxyMethod
    public def createPaymentOrder( def info ) {
        initEnv();       

        if(!info.txntype) return [status:0, message:'txntype is required'];

        String locid = orgSvc.getRoot().code.replaceAll('-', ''); 
        info.objid =  KeyGen.generateAlphanumKey( locid.padRight( 6, "0" ), 12 );
        info.txndate = dateSvc.getServerDate(); 
        info.controlno =  seqSvc.getNextPONumber( locid.padRight( 5, "0" ));  
        info.locationid = locid; 

        def cal = Calendar.instance; 
        cal.setTime( info.txndate ); 
        cal.add( Calendar.HOUR, 24 ); 
        info.expirydate = new java.sql.Timestamp( cal.getTimeInMillis() ); 
        if ( info.txntypename==null ) info.txntypename = info.txntype; 
        info.state = 'PENDING';
        def po = poEm.create( info ); 

        po.orgcode = info.orgcode;
        po.refno = info.refno;
        po.origin = info.origin;

        //execute creation of payment order in cloud
        cloudSvc.createPaymentOrder( po );

        //activate the state. activated means it is actually updated in the cloud.
        activatePaymentOrder( [objid:po.objid] );        
    }

    @ProxyMethod
    public void activatePaymentOrder(def o ) {
        poEm.find( [objid: o.objid ] ).update( [state: 'ACTIVE'] );
    }

    @ProxyMethod
    public void cancelPaymentOrder( o ) { 
        def po = poEm.find([ objid: o.refno ]).first();
        if ( !po?.objid ) throw new Exception(""+ o.refno +" payment order not found"); 

        po_cancelled_db.create( po ); 
        poEm.find([ objid: po.objid ]).delete(); 
    } 

    

    @ProxyMethod(local=true)
    public void emailPayment( def r ) {
        try {
            //save also eor for emailing. The other data is fetched from the interceptor  
            def mm = [:];
            mm.reportid = "eor";
            mm.refid = r.objid;
            emailQueueSvc.send( mm );
        }
        catch( Throwable ee ) {
            def m = buildErrorInfo( t ); 
            println 'email payment error '+ r.paymentrefid +' caused by: '+ m.errmsg; 
            m.paymentrefid = r.paymentrefid; 
            m.txndate = dateSvc.getServerDate();
            m.errcode = 2;
            err_db.create( m );  
        }
    }

    @ProxyMethod(local=true)
    public def updateCloudPayment( def r ) {
        //attempt to post in cloud 
        try {
            def rm = [:];
            rm.receiptno = r.receiptno;
            rm.receiptid = r.objid;
            rm.receiptdate = r.receiptdate; 
            rm.paymentrefid = r.paymentrefid;        
            cloudSvc.updatePaymentReceipt( rm );
        }
        catch( Throwable t) {
            def m = buildErrorInfo( t ); 
            println 'update cloud payment error '+ r.paymentrefid +' caused by: '+ m.errmsg; 
            m.paymentrefid = r.paymentrefid; 
            m.txndate = dateSvc.getServerDate();
            m.errcode = 1;
            err_db.create( m );  
            return null;
        }   
        emailPayment( r ); 
    }

    @ProxyMethod(local=true)
    public def postPayment( def o ) {
        initEnv(); 
        def paymentrefid = o.paymentrefid;
        def retval = null;
        try { 
            def po = poEm.find([ objid: paymentrefid ]).first();
            if ( !po?.objid ) throw new Exception('Payment Order No. ' + paymentrefid + ' does not exist or has already been processed.')
            if (o.tracedate instanceof String ) {
                def df = new java.text.SimpleDateFormat("yyyy-MM-dd");
                o.tracedate = df.parse( o.tracedate );
            }
            if(po.amount != o.amount) throw new Exception("Amount does not match");
            if(po.txntype != o.txntype) throw new Exception("txntype does not match. Txntype passed is " + o.txntype );

            po.partnerid = o.partnerid; 
            po.tracedate = o.tracedate; 
            po.traceid = o.traceid;
            retval = eorSvc.post( po );
        } 
        catch(Throwable t) { 
            def m = buildErrorInfo( t ); 
            println 'payment posting error '+ paymentrefid +' caused by: '+ m.errmsg; 
            m.paymentrefid = paymentrefid; 
            m.txndate = dateSvc.getServerDate();
            m.errcode = 0;
            err_db.create( m );  
            return null;
        } 

        updateCloudPayment( retval );
        return retval;
    }    

    private def buildErrorInfo( Throwable t ) {
        def m = [:];  
        def cause = t; 
        while (cause != null) {
            m.errmsg = cause.message; 
            if ( m.errmsg != null) { 
                def buff = new java.io.StringWriter();
                cause.printStackTrace(new java.io.PrintWriter(buff)); 
                m.errdetail = buff.toString(); 
            } 
            cause = cause.cause; 
        }
        m.errmsg = m.errmsg.toString();
        if ( m.errdetail == null ) {
            def buff = new java.io.StringWriter();
            t.printStackTrace(new java.io.PrintWriter(buff)); 
            m.errdetail = buff.toString(); 
        } 
        return m; 
    }

    @ProxyMethod
    public def getPaymentOrder( def o ) {
        def po = poEm.find([objid: o.objid]).first();
        if(!po) {
            po = poPaidEm.find( [objid: o.objid ]).first();
        }
        return po;
    }

    @ProxyMethod
    public def getReceipt( def o ) {
        return eorEm.find( [objid: o.objid]).first(1);
    }


}
