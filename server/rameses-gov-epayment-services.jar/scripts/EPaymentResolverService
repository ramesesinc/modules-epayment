import com.rameses.annotations.*

class EPaymentResolverService {

    @Service("EPaymentService")
    def epaymentSvc;

    @DataContext("eor_payment_error")
    def error_db;

    @Service(value="epayment/QueryService", connection="cloud-server")
    def cloudQrySvc;

    @ProxyMethod
    public void resolveError( p ) {  
        def err = error_db.find( [objid: p.objid ] ).first();

        //delete error after everything. If there are other process errors, a new error will be created by the epayment service.
        error_db.find( [objid: p.objid ] ).delete();

        if( err.laststate == 0 ) {
            def m = [:];
            m._schemaname = "payment";
            m.findBy = [ paymentrefid: err.paymentrefid  ];
            def pmt = cloudQrySvc.findFirst( m );
            if( pmt.receiptno ) throw new Exception("This transaction was already paid. Please refer to EOR No." + pmt.receiptno );
            pmt.laststate = err.laststate;

            def pr = [:];
            pr.traceid = pmt.traceid;
            pr.tracedate = pmt.tracedate;
            pr.amount = pmt.amount;
            pr.txntype = pmt.paymentorder.txntype;
            pr.partnerid = pmt.paypartnerid;
            pr.paymentrefid = pmt.paymentrefid;

            epaymentSvc.postPayment( pr );
        }
        else {
            epaymentSvc.postPayment( [paymentrefid: p.paymentrefid, laststate: err.laststate ] );            
        }
    }  


}
